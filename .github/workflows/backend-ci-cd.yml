name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: Check for dependency conflicts
        run: |
          pip check || echo "Warning: Dependency conflicts found. Review requirements.txt"
          
      - name: Install project dependencies
        run: |
          pip install -r requirements.txt --no-deps
          pip install -r requirements.txt
        continue-on-error: true
          
      - name: Dependency vulnerability scan with Safety
        run: safety check -r requirements.txt --output text
        continue-on-error: true
        
      - name: Secret scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      
      - name: Static security code analysis
        run: bandit -r . -x tests/ -f json -o bandit-results.json
        continue-on-error: true
        
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-results.json
          retention-days: 7

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black pylint
      
      - name: Install project dependencies
        run: |
          pip install -r requirements.txt --no-deps
          pip install -r requirements.txt
        continue-on-error: true
          
      - name: Lint with flake8
        run: flake8 . --count --select=E9,F63,F7,F82,E501 --max-line-length=100 --show-source --statistics
        continue-on-error: true
        
      - name: Security linting with pylint
        run: |
          pip install pylint
          pylint --disable=all --enable=invalid-name,unnecessary-lambda,dangerous-default-value .
        continue-on-error: true
        
      - name: Run black format check (informational only)
        run: |
          echo "::notice::Running black format check (for information only, will not fail the build)"
          black --check --diff . || echo "Black formatting issues exist but continuing"
        continue-on-error: true

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio pytest-mock
      
      - name: Install project dependencies safely
        run: |
          pip install -r requirements.txt --no-deps
          pip install -r requirements.txt
        continue-on-error: true
          
      - name: Test with pytest
        run: |
          pytest
        continue-on-error: true
        
      - name: Generate coverage report
        run: |
          pytest --cov=. --cov-report=xml --cov-report=term
        continue-on-error: true
          
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  security-report:
    needs: [security-scan, code-quality, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          name: security-reports
          path: ./security-reports
          
      - name: Generate security summary
        run: |
          echo "## Security Scan Summary" > security-summary.md
          echo "Security scanning completed on $(date)" >> security-summary.md
          echo "### Security findings:" >> security-summary.md
          cat security-reports/* 2>/dev/null || echo "No detailed reports found" >> security-summary.md
        continue-on-error: true
          
      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 30

